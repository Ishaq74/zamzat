---
import Layout from '@layouts/Layout.astro';
import Landing from '@layouts/Landing.astro';

// Importation dynamique de tous les composants Astro
const componentModules = import.meta.glob('../components/**/*.astro');

// Récupérer les noms des composants pour l'interface utilisateur
const componentNames = Object.keys(componentModules).map(path => {
  const name = (path.split('/').pop() || '').replace('.astro', '');
  return { path, name };
});

// Définir les layouts disponibles
const availableLayouts = [
  { id: 'Layout', name: 'Layout Standard', component: Layout },
  { id: 'Landing', name: 'Landing Page', component: Landing }
];
---

<Layout title="Éditeur visuel de page" description="Construisez vos pages avec une interface fluide">
  <div class="editor-container">
    <!-- Barre latérale gauche - Palette de composants -->
    <div class="editor-sidebar left">
      <div class="sidebar-header">
        <h2>Composants</h2>
        <div class="search-box">
          <input type="text" id="component-search" placeholder="Rechercher...">
        </div>
      </div>

      <div class="component-categories">
        <div class="category">
          <h3>Structure</h3>
          <div class="component-list" data-category="structure">
            {componentNames
              .filter(c => c.name.includes('Header') || c.name.includes('Footer') || c.name.includes('Container'))
              .map(component => (
                <div 
                  class="component-item" 
                  data-component-path={component.path}
                  data-component-name={component.name}
                  draggable="true"
                >
                  <div class="component-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                      <path fill="none" d="M0 0h24v24H0z"/>
                      <path d="M3 3h18v18H3V3zm16 16V5H5v14h14z"/>
                    </svg>
                  </div>
                  <span>{component.name}</span>
                </div>
              ))
            }
          </div>
        </div>

        <div class="category">
          <h3>Contenu</h3>
          <div class="component-list" data-category="content">
            {componentNames
              .filter(c => !c.name.includes('Header') && !c.name.includes('Footer') && !c.name.includes('Container'))
              .map(component => (
                <div 
                  class="component-item" 
                  data-component-path={component.path}
                  data-component-name={component.name}
                  draggable="true"
                >
                  <div class="component-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                      <path fill="none" d="M0 0h24v24H0z"/>
                      <path d="M3 4h18v2H3V4zm0 15h14v2H3v-2zm0-5h18v2H3v-2zm0-5h14v2H3V9z"/>
                    </svg>
                  </div>
                  <span>{component.name}</span>
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>

    <!-- Zone centrale - Canevas d'édition -->
    <div class="editor-content">
      <div class="editor-toolbar">
        <div class="layout-controls">
          <label for="layout-select">Layout:</label>
          <select id="layout-select">
            {availableLayouts.map(layout => (
              <option value={layout.id}>{layout.name}</option>
            ))}
          </select>
        </div>

        <div class="page-info">
          <input type="text" id="page-title" placeholder="Titre de la page">
          <input type="text" id="page-slug" placeholder="slug-de-la-page">
        </div>

        <div class="editor-actions">
          <button id="undo-btn" class="icon-btn" title="Annuler">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <path fill="none" d="M0 0h24v24H0z"/>
              <path d="M5.828 7l2.536 2.536L6.95 10.95 2 6l4.95-4.95 1.414 1.414L5.828 5H13a8 8 0 1 1 0 16H4v-2h9a6 6 0 1 0 0-12H5.828z"/>
            </svg>
          </button>
          <button id="redo-btn" class="icon-btn" title="Rétablir">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <path fill="none" d="M0 0h24v24H0z"/>
              <path d="M18.172 7l-2.536 2.536 1.414 1.414L22 6l-4.95-4.95-1.414 1.414L18.172 5H11a8 8 0 1 0 0 16h9v-2h-9a6 6 0 1 1 0-12h7.172z"/>
            </svg>
          </button>
          <button id="preview-btn" class="btn">Aperçu</button>
          <button id="save-btn" class="btn primary">Enregistrer</button>
        </div>
      </div>

      <div class="editor-canvas">
        <div id="layout-preview" class="layout-preview">
          <!-- Les zones de drop seront générées ici -->
        </div>
      </div>
    </div>

    <!-- Barre latérale droite - Propriétés du composant -->
    <div class="editor-sidebar right">
      <div class="sidebar-header">
        <h2>Propriétés</h2>
        <button id="close-props" class="icon-btn" title="Fermer">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
            <path fill="none" d="M0 0h24v24H0z"/>
            <path d="M12 10.586l4.95-4.95 1.414 1.414-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636z"/>
          </svg>
        </button>
      </div>

      <div id="properties-panel" class="properties-panel">
        <div class="no-selection-message">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48">
            <path fill="none" d="M0 0h24v24H0z"/>
            <path d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm-1-5h2v2h-2v-2zm0-8h2v6h-2V7z"/>
          </svg>
          <p>Sélectionnez un composant pour modifier ses propriétés</p>
        </div>

        <div id="properties-form" class="properties-form" style="display: none;">
          <!-- Le formulaire de propriétés sera généré dynamiquement ici -->
        </div>
      </div>
    </div>
  </div>

  <!-- Zone cachée pour le rendu des composants -->
  <div id="component-renderer" style="display: none;"></div>

  <!-- Styles (inchangés, je les garde comme dans ton fichier) -->
  <style>
    /* Styles généraux */
    :root {
      --primary-color: #4f46e5;
      --primary-hover: #4338ca;
      --secondary-color: #f9fafb;
      --border-color: #e5e7eb;
      --text-color: #1f2937;
      --text-light: #6b7280;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --danger-color: #ef4444;
    }

    * {
      box-sizing: border-box;
    }

    .editor-container {
      display: grid;
      grid-template-columns: 280px 1fr 320px;
      height: calc(100vh - 60px);
      overflow: hidden;
      background-color: var(--secondary-color);
      color: var(--text-color);
    }

    /* Barres latérales */
    .editor-sidebar {
      background-color: white;
      border-right: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .editor-sidebar.right {
      border-right: none;
      border-left: 1px solid var(--border-color);
    }

    .sidebar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      border-bottom: 1px solid var(--border-color);
    }

    .sidebar-header h2 {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
    }

    .search-box {
      margin-top: 0.5rem;
      width: 100%;
    }

    .search-box input {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }

    .component-categories {
      flex: 1;
      overflow-y: auto;
      padding: 0 1rem 1rem;
    }

    .category {
      margin-top: 1rem;
    }

    .category h3 {
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--text-light);
      margin: 0.5rem 0;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .component-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .component-item {
      display: flex;
      align-items: center;
      background-color: var(--secondary-color);
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      padding: 0.5rem;
      cursor: move;
      transition: background-color 0.2s;
    }

    .component-item:hover {
      background-color: var(--primary-hover);
      color: white;
    }

    .component-icon {
      margin-right: 0.5rem;
    }

    .editor-content {
      display: flex;
      flex-direction: column;
      height: 100%;
    }

    .editor-toolbar {
      background-color: white;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 1rem;
    }

    .layout-controls {
      display: flex;
      align-items: center;
    }

    .layout-controls label {
      margin-right: 0.5rem;
      font-size: 0.875rem;
      color: var(--text-light);
    }

    .layout-controls select {
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }

    .page-info {
      display: flex;
      gap: 0.5rem;
    }

    .page-info input {
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }

    .editor-actions {
      display: flex;
      gap: 0.5rem;
    }

    .icon-btn {
      background: none;
      border: none;
      cursor: pointer;
      padding: 0.5rem;
      transition: background-color 0.2s;
    }

    .icon-btn:hover {
      background-color: var(--primary-hover);
      color: white;
    }

    .btn {
      background-color: var(--primary-color);
      border: none;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .btn.primary {
      background-color: var(--success-color);
    }

    .btn:hover {
      background-color: var(--primary-hover);
    }

    .editor-canvas {
      background-color: #e9e9e9;
      flex: 1;
      overflow-y: auto;
      padding: 2rem;
    }

    .layout-preview {
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      margin: 0 auto;
      max-width: 1200px;
      min-height: 800px;
      padding: 1rem;
    }

    .dropzone {
      border: 2px dashed var(--border-color);
      border-radius: 0.25rem;
      margin: 1rem 0;
      min-height: 100px;
      padding: 1rem;
      position: relative;
      transition: background-color 0.2s;
    }

    .dropzone-header {
      background-color: var(--secondary-color);
      border-bottom: 1px solid var(--border-color);
      font-size: 0.875rem;
      padding: 0.25rem 0.5rem;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
    }

    .dropzone.dragover {
      background-color: var(--primary-hover);
      border-color: var(--primary-color);
    }

    .placed-component {
      background-color: white;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      margin: 1rem 0;
      position: relative;
      transition: border-color 0.2s;
    }

    .placed-component.selected {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
    }

    .component-header {
      background-color: var(--secondary-color);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
    }

    .component-content {
      padding: 0.5rem;
    }

    .properties-panel {
      padding: 1rem;
      overflow-y: auto;
    }

    .no-selection-message {
      text-align: center;
      color: var(--text-light);
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.25rem;
      font-size: 0.875rem;
      color: var(--text-light);
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--border-color);
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }
  </style>

  <!-- Script inline corrigé -->
  <script is:inline>
    // Récupérer les données des étapes précédentes
    const userData = JSON.parse(localStorage.getItem('identity_organization') || '{}');
    const stylesData = JSON.parse(localStorage.getItem('styles_organizations') || '{}');
    const collectionsData = JSON.parse(localStorage.getItem('data_organization') || '{}');

    // État de l'éditeur
    const editorState = {
      currentLayout: 'Layout',
      selectedComponentId: null,
      nextComponentId: 1,
      pageStructure: {
        layout: 'Layout',
        pageTitle: '',
        pageSlug: '',
        components: []
      }
    };

    // Initialiser l'éditeur
    document.addEventListener('DOMContentLoaded', () => {
      initLayoutSelector();
      initDropZones();
      initDragAndDrop();
      initSaveButton();
      initComponentSearch();
    });

    // Initialiser le sélecteur de layout
    function initLayoutSelector() {
      const select = document.getElementById('layout-select');

      select.addEventListener('change', () => {
        editorState.currentLayout = select.value;
        editorState.pageStructure.layout = select.value;
        renderDropZones();
      });
    }

    // Initialiser les zones de drop
    function initDropZones() {
      renderDropZones();
    }

    // Rendre les zones de drop basées sur le layout sélectionné
    function renderDropZones() {
      const layoutPreview = document.getElementById('layout-preview');
      layoutPreview.innerHTML = '';

      if (editorState.currentLayout === 'Layout') {
        layoutPreview.innerHTML = `
          <div class="dropzone" data-slot="main">
            <div class="dropzone-header">Main Content</div>
          </div>
        `;
      } else if (editorState.currentLayout === 'Landing') {
        layoutPreview.innerHTML = `
          <div class="dropzone" data-slot="header">
            <div class="dropzone-header">Header</div>
          </div>
          <div class="dropzone" data-slot="main">
            <div class="dropzone-header">Main Content</div>
          </div>
          <div class="dropzone" data-slot="footer">
            <div class="dropzone-header">Footer</div>
          </div>
        `;
      }
    }

    // Initialiser le drag and drop
    function initDragAndDrop() {
      // Configurer les éléments draggables
      document.querySelectorAll('.component-item').forEach(item => {
        item.addEventListener('dragstart', e => {
          e.dataTransfer.setData('text/plain', JSON.stringify({
            action: 'add',
            componentName: item.getAttribute('data-component-name'),
            componentPath: item.getAttribute('data-component-path')
          }));
        });
      });

      // Configurer les zones de drop par délégation d'événements
      document.getElementById('layout-preview').addEventListener('dragover', e => {
        const dropzone = e.target.closest('.dropzone');
        if (!dropzone) return;

        e.preventDefault();
        dropzone.classList.add('dragover');
      });

      document.getElementById('layout-preview').addEventListener('dragleave', e => {
        const dropzone = e.target.closest('.dropzone');
        if (!dropzone) return;

        dropzone.classList.remove('dragover');
      });

      document.getElementById('layout-preview').addEventListener('drop', e => {
        const dropzone = e.target.closest('.dropzone');
        if (!dropzone) return;

        e.preventDefault();
        dropzone.classList.remove('dragover');

        const data = JSON.parse(e.dataTransfer.getData('text/plain'));
        addComponentToDropzone(data, dropzone);
      });
    }

    // Ajouter un composant à une zone de drop
    function addComponentToDropzone(data, dropzone) {
      const componentId = generateUniqueId();
      const component = {
        id: componentId,
        name: data.componentName,
        path: data.componentPath,
        props: {},
        slot: dropzone.getAttribute('data-slot')
      };

      editorState.pageStructure.components.push(component);
      renderPlacedComponent(component, dropzone);
    }

    // Rendre un composant placé
    function renderPlacedComponent(component, container) {
      const componentEl = document.createElement('div');
      componentEl.className = 'placed-component';
      componentEl.setAttribute('data-component-id', component.id);

      const headerEl = document.createElement('div');
      headerEl.className = 'component-header';
      headerEl.innerHTML = `
        <div>
          <span>${component.name}</span>
          <button class="icon-btn" title="Supprimer" onclick="removeComponent('${component.id}')">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
              <path fill="none" d="M0 0h24v24H0z"/>
              <path d="M12 10.586l4.95-4.95 1.414 1.414-4.95 4.95 4.95 4.95-1.414 1.414-4.95-4.95-4.95 4.95-1.414-1.414 4.95-4.95-4.95-4.95L7.05 5.636z"/>
            </svg>
          </button>
        </div>
      `;

      const contentEl = document.createElement('div');
      contentEl.className = 'component-content';
      contentEl.innerHTML = `<p>Composant ${component.name}</p>`; // Placeholder pour l'instant

      componentEl.appendChild(headerEl);
      componentEl.appendChild(contentEl);
      container.appendChild(componentEl);
    }

    // Supprimer un composant
    function removeComponent(componentId) {
      editorState.pageStructure.components = editorState.pageStructure.components.filter(c => c.id !== componentId);
      document.querySelector(`[data-component-id="${componentId}"]`).remove();
    }

    // Initialiser le bouton d'enregistrement
    function initSaveButton() {
      document.getElementById('save-btn').addEventListener('click', () => {
        editorState.pageStructure.pageTitle = document.getElementById('page-title').value;
        editorState.pageStructure.pageSlug = document.getElementById('page-slug').value;
        localStorage.setItem('pageStructure', JSON.stringify(editorState.pageStructure));
        alert('Page enregistrée avec succès !');
      });
    }

    // Initialiser la recherche de composants
    function initComponentSearch() {
      const searchInput = document.getElementById('component-search');
      searchInput.addEventListener('input', () => {
        const query = searchInput.value.toLowerCase();
        document.querySelectorAll('.component-item').forEach(item => {
          const name = item.getAttribute('data-component-name').toLowerCase();
          item.style.display = name.includes(query) ? 'flex' : 'none';
        });
      });
    }

    // Générer un ID unique pour chaque composant
    function generateUniqueId() {
      return `component-${editorState.nextComponentId++}`;
    }
  </script>
</Layout>